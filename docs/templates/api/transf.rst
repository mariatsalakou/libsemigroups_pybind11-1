.. Copyright (c) 2021, J. D. Mitchell

   Distributed under the terms of the GPL license version 3.

   The full license is in the file LICENSE, distributed with this software.
   
   This file was auto-generated from the template in docs/templates/api/transf.rst

   DO NOT EDIT this file directly

{{LongNameCap}}s
{{Underline}}

This page contains the documentation for functionality in
``libsemigroups_pybind11`` for {{LongNameNoCap}}s.

{{LongNameCap}}s on up to ``4294967296`` points are available in
``libsemigroups_pybind11`` using the function :py:class:`{{Type}}`.
:py:class:`{{Type}}` is a function that returns an instance of one of a number of
internal classes. These internal types are optimised for the number of points
in the image of the specified {{LongNameNoCap}} with fewer points requiring less
space per point.  If ``libsemigroups`` has been compiled with ``HPCombi``
enabled, then the objects returned by :py:class:`{{Type}}` use the SSE and AVX
instruction sets are used for very fast manipulation. 

While :py:class:`{{Type}}` is not a class the objects returned by
:py:class:`{{Type}}` have identical methods, and so we document
:py:class:`{{Type}}` as if it was a class. 

.. py:class:: {{Type}}

      Instances of this class implement {{LongNameNoCap}}s.

      A {{LongNameNoCap}} :math:`f` is just a{{Function}} function defined on
      {{Subset}} of :math:`\{0,1,\ldots,nâˆ’1\}` for some positive integer
      :math:`n` called the *degree* of :math:`f`. A {{LongNameNoCap}} is stored
      as an array of the images :math:`\{(0)f,(1)f,\ldots,(nâˆ’1)f\}`.

      .. py:method:: __eq__(self: {{Type}}, that: {{Type}}) -> bool
        
          Equality comparison.

          Returns ``True`` if ``self`` equals ``that`` by comparing their
          image values.

          :param that: the {{LongNameNoCap}} for comparison.
          :type that: {{Type}}

          :returns: A ``bool``.
      
      .. py:method:: __getitem__(self: {{Type}}, i: int) -> int
        
            Returns the image of ``i``.

            :param i: the value whose image is sought.
            :type i: int

            :return: An ``int``.
      
      .. py:method:: __lt__(self: {{Type}}, that: {{Type}}) -> bool

            Less than comparison.

            Returns ``True`` if the list of images of ``self`` is
            lexicographically less than the list of images of ``that``.

            :param that: the {{LongNameNoCap}} for comparison.
            :type that: {{Type}}

            :returns: A ``bool``.
      
      .. py:method:: __mul__(self: {{Type}}, that: {{Type}}) -> {{Type}} 

            Right multiply ``self`` by ``that``.

            :param that: the {{LongNameNoCap}} to multiply with.
            :type that: {{Type}}

            :returns: A :py:class:`{{Type}}`.
      
      .. py:method:: degree(self: {{Type}}) -> int

            Returns the degree.

            Returns the number of points that the {{LongNameNoCap}} is defined
            on.

            :Parameters: ``None``
            :return: An ``int``.
      
      .. py:method:: identity(self: {{Type}}) -> int

            Returns the identity {{LongNameNoCap}} on :py:meth:`degree` points.

            :Parameters: None

            :return: A :py:class:`{{Type}}`.

      .. py:staticmethod:: make(l: List[int]) -> {{Type}}

            Construct and validate.

            Constructs a {{LongNameNoCap}} initialized using list ``l`` as
            follows: the image of the point ``i`` under the {{LongNameNoCap}} is
            ``l[i]``.

            :param l: the list of images.
            :type l: List[int]

            :return: A newly constructed {{LongNameNoCap}}.
            :rtype: {{Type}}

            :raises RuntimeError: if any value in ``l`` exceeds ``len(l)``.
       
      .. py:staticmethod:: make_identity(M: int) -> {{Type}}

            Returns the identity {{LongNameNoCap}} on the given number of
            points.

            :Parameters: **M** (int) - the degree.

            :Returns: A value of type :py:class:`{{Type}}`.
      
      .. py:method:: product_inplace(self: {{Type}}, x: {{Type}}, y: {{Type}}) -> None
       
            Multiply two {{LongNameNoCap}}s and store the product in ``self``.

            :param x: a {{LongNameNoCap}}.
            :type x: {{Type}}
            :param y: a {{LongNameNoCap}}.
            :type y: {{Type}}

            :return: (None)
            
      .. py:method:: rank(self: {{Type}}) -> int

            Returns the number of distinct image values.

            The rank of a {{LongNameNoCap}} is the number of its
            distinct image values.

            :Parameters: None
            :return: An ``int``.
      
      .. py:method:: images(self: {{Type}}) -> Iterator

            Returns an iterator pointing at the first image value.

            :Parameters: None
            :return: An iterator.

      {% if Type == "PPerm" or Type == "Perm" -%}
      .. py:method:: inverse(self: {{Type}}) -> {{Type}}

            Returns the inverse.

            :Parameters: None
            :Returns: A :py:class:`{{Type}}`.
      {% endif %}

      {% if Type == "PPerm" -%}
      
      .. py:staticmethod:: make(dom: List[int], ran: List[int], M: int) -> {{Type}}
            :noindex:

            Construct from domain, range, and degree, and validate.

            :Parameters: - **dom** (List[int]) - the domain
                         - **ran** (List[int]) - the range
                         - **M** (int) - the degree

            :return: A newly constructed :py:class:`{{Type}}`.

      .. py:method:: inverse(self: {{Type}}, that: {{Type}}) -> None
            :noindex:

            Replace contents of a {{LongNameNoCap}} with the inverse of another.

            :Parameters: **that** ({{Type}}) - the {{LongNameNoCap}} to invert.

            :Returns: (None)

      .. py:method:: left_one(self: {{Type}}) -> {{Type}}

            Returns the left one of ``self``.

            :Parameters: None.
            :return: A ``{{Type}}``.
      
      .. py:method:: right_one(self: {{Type}}) -> {{Type}}

            Returns the right one of this.

            :Parameters: None.
            :return: A ``{{Type}}``.
                 
      .. py:method:: undef(self: {{Type}}) -> int

            Returns the integer value used to represent undefined.

            :Parameters: None.

            :Returns: An ``int``.

      {% endif %}
